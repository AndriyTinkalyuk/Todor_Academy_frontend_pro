// 2.
// –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π —ñ—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –æ–±'—î–∫—Ç–∞, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö (—Å—Ç—Ä—ñ—á–∫–∏, —á–∏—Å–ª–∞, –±—É–ª–µ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ—â–æ). –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–∏–∫–ª for .. of –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É —Ü—å–æ–≥–æ –æ–±'—î–∫—Ç—É.

let iteratorObj = {
    1 : "—Å—Ç—Ä—ñ—á–∫–∞",
    2 : true,
    3 : 1234568,
    "a" : [1,1,1],
    "people" : {
        "name" : "Andriy",
    },

    [Symbol.iterator]() { 
        const raw = this;
        const keys = Object.keys(this);
        let index = 0;
        return {
             next () {

                return {
                    value: raw[keys[index++]],
                    done: index > keys.length,
                }

        }
    }
}
}

for (item of iteratorObj) { 
    console.log(item);  
}

// 4.
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö (—Å—Ç—Ä—ñ—á–∫–∏, —á–∏—Å–ª–∞, –æ–±'—î–∫—Ç–∏ —Ç–æ—â–æ) —ñ –≤–∏–≤–µ–¥—ñ—Ç—å —ó—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É for .. of.

let myArray = ["ü•ù","crocodino bombolino", 123456, {"name": "crocodino", "last name": "bombolino"}, [1,1,1,1,1],];

for (let item of myArray) { 
    console.log(item); 
}

//5.
//–ü–µ—Ä–µ–ø–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for –¥–ª—è —ñ—Ç–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ –º–∞—Å–∏–≤—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü–∏–∫–ª for .. of.

// for (let i = 0;i < myArray.length; i++) {
// console.log(myArray[i]);
// }

// for (let item of myArray) { 
//     console.log(item); 
// }

//.
//–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –Ω–∞ –≤—Ö—ñ–¥ –±—É–¥—å-—è–∫–∏–π —ñ—Ç–µ—Ä–æ–≤–∞–Ω–∏–π –æ–±'—î–∫—Ç —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É while.


function logIterator(iteratorObject) { 
  let iterator = iteratorObject[Symbol.iterator]();
  let iteration = iterator.next();

  while(!iteration.done) {
    console.log(iteration.value);
    iteration = iterator.next();
  }
}

logIterator(iteratorObj);


//7.
//–°—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π —ñ—Ç–µ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –ø–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –ø—Ä–æ—Å—Ç—ñ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ. –í–∏–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à—ñ 10 –ø—Ä–æ—Å—Ç–∏—Ö —á–∏—Å–µ–ª.

class PrimeIterator{
    constructor(from, to) { 
        this.from = Number(from);
        this.to = Number(to);
    }

    [Symbol.iterator](){
        let currentValue = this.from;
        let end = this.to;
        let raw = this;
        return {
            next() {
                while(currentValue <= end) {
                    if(raw.#isPrime(currentValue)) {
                        return {
                            value: currentValue++,
                            done: false,
                        }
                    }
                    currentValue++
                }
                return {
                    value: undefined,
                    done: true,
                }
                }
            }
        }

        #isPrime(num){
        if(num === 2) { return true};
        if(num % 2 === 0) {return false};
        for (let i = num; i <= Math.sqrt(num); i++ ) { 
            if (num % i - 1 === 0) {
                return false;
            }
        } 

        return true;
        }
    
    }


  const somePrimeIterator = new PrimeIterator(45, 100);
  const primeList = [];
  for(number of somePrimeIterator) { 
    primeList.push(number)
    if (primeList.length === 10) { 
        break
    }
  }

  console.log(primeList);


 // 9.
//–î–æ—Å–ª—ñ–¥—ñ—Ç—å –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —ñ—Ç–µ—Ä–æ–≤–∞–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è (...). –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –π–æ–≥–æ –¥–æ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —ñ—Ç–µ—Ä–æ–≤–∞–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤.

console.log(...somePrimeIterator)
console.log(...myArray)

const exapleObj = {
    "name": 123,
}

console.log(...exapleObj)